/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.tables;


import edu.java.domain.jooq.DefaultSchema;
import edu.java.domain.jooq.Keys;
import edu.java.domain.jooq.tables.records.StackoverflowAnswerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StackoverflowAnswer extends TableImpl<StackoverflowAnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>STACKOVERFLOW_ANSWER</code>
     */
    public static final StackoverflowAnswer STACKOVERFLOW_ANSWER = new StackoverflowAnswer();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<StackoverflowAnswerRecord> getRecordType() {
        return StackoverflowAnswerRecord.class;
    }

    /**
     * The column <code>STACKOVERFLOW_ANSWER.LINK_ID</code>.
     */
    public final TableField<StackoverflowAnswerRecord, Long> LINK_ID = createField(DSL.name("LINK_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>STACKOVERFLOW_ANSWER.ANSWER_ID</code>.
     */
    public final TableField<StackoverflowAnswerRecord, Long> ANSWER_ID = createField(DSL.name("ANSWER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>STACKOVERFLOW_ANSWER.USER_NAME</code>.
     */
    public final TableField<StackoverflowAnswerRecord, String> USER_NAME = createField(DSL.name("USER_NAME"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>STACKOVERFLOW_ANSWER.IS_ACCEPTED</code>.
     */
    public final TableField<StackoverflowAnswerRecord, Boolean> IS_ACCEPTED = createField(DSL.name("IS_ACCEPTED"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>STACKOVERFLOW_ANSWER.CREATION_DATE</code>.
     */
    public final TableField<StackoverflowAnswerRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("CREATION_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>STACKOVERFLOW_ANSWER.LAST_ACTIVITY_DATE</code>.
     */
    public final TableField<StackoverflowAnswerRecord, LocalDateTime> LAST_ACTIVITY_DATE = createField(DSL.name("LAST_ACTIVITY_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>STACKOVERFLOW_ANSWER.LAST_EDIT_DATE</code>.
     */
    public final TableField<StackoverflowAnswerRecord, LocalDateTime> LAST_EDIT_DATE = createField(DSL.name("LAST_EDIT_DATE"), SQLDataType.LOCALDATETIME(6), this, "");

    private StackoverflowAnswer(Name alias, Table<StackoverflowAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private StackoverflowAnswer(Name alias, Table<StackoverflowAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>STACKOVERFLOW_ANSWER</code> table reference
     */
    public StackoverflowAnswer(String alias) {
        this(DSL.name(alias), STACKOVERFLOW_ANSWER);
    }

    /**
     * Create an aliased <code>STACKOVERFLOW_ANSWER</code> table reference
     */
    public StackoverflowAnswer(Name alias) {
        this(alias, STACKOVERFLOW_ANSWER);
    }

    /**
     * Create a <code>STACKOVERFLOW_ANSWER</code> table reference
     */
    public StackoverflowAnswer() {
        this(DSL.name("STACKOVERFLOW_ANSWER"), null);
    }

    public <O extends Record> StackoverflowAnswer(Table<O> child, ForeignKey<O, StackoverflowAnswerRecord> key) {
        super(child, key, STACKOVERFLOW_ANSWER);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<StackoverflowAnswerRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6B;
    }

    @Override
    @NotNull
    public List<ForeignKey<StackoverflowAnswerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_6);
    }

    private transient Link _link;

    /**
     * Get the implicit join path to the <code>PUBLIC.LINK</code> table.
     */
    public Link link() {
        if (_link == null)
            _link = new Link(this, Keys.CONSTRAINT_6);

        return _link;
    }

    @Override
    @NotNull
    public StackoverflowAnswer as(String alias) {
        return new StackoverflowAnswer(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public StackoverflowAnswer as(Name alias) {
        return new StackoverflowAnswer(alias, this);
    }

    @Override
    @NotNull
    public StackoverflowAnswer as(Table<?> alias) {
        return new StackoverflowAnswer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public StackoverflowAnswer rename(String name) {
        return new StackoverflowAnswer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public StackoverflowAnswer rename(Name name) {
        return new StackoverflowAnswer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public StackoverflowAnswer rename(Table<?> name) {
        return new StackoverflowAnswer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row7<Long, Long, String, Boolean, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super String, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super String, ? super Boolean, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
