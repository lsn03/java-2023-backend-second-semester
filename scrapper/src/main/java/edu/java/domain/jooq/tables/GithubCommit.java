/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.tables;


import edu.java.domain.jooq.DefaultSchema;
import edu.java.domain.jooq.Keys;
import edu.java.domain.jooq.tables.records.GithubCommitRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GithubCommit extends TableImpl<GithubCommitRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>GITHUB_COMMIT</code>
     */
    public static final GithubCommit GITHUB_COMMIT = new GithubCommit();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<GithubCommitRecord> getRecordType() {
        return GithubCommitRecord.class;
    }

    /**
     * The column <code>GITHUB_COMMIT.COMMIT_ID</code>.
     */
    public final TableField<GithubCommitRecord, Long> COMMIT_ID = createField(DSL.name("COMMIT_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>GITHUB_COMMIT.LINK_ID</code>.
     */
    public final TableField<GithubCommitRecord, Long> LINK_ID = createField(DSL.name("LINK_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>GITHUB_COMMIT.SHA</code>.
     */
    public final TableField<GithubCommitRecord, String> SHA = createField(DSL.name("SHA"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>GITHUB_COMMIT.AUTHOR</code>.
     */
    public final TableField<GithubCommitRecord, String> AUTHOR = createField(DSL.name("AUTHOR"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>GITHUB_COMMIT.CREATED_AT</code>.
     */
    public final TableField<GithubCommitRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>GITHUB_COMMIT.MESSAGE</code>.
     */
    public final TableField<GithubCommitRecord, String> MESSAGE = createField(DSL.name("MESSAGE"), SQLDataType.VARCHAR(1000000000), this, "");

    private GithubCommit(Name alias, Table<GithubCommitRecord> aliased) {
        this(alias, aliased, null);
    }

    private GithubCommit(Name alias, Table<GithubCommitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>GITHUB_COMMIT</code> table reference
     */
    public GithubCommit(String alias) {
        this(DSL.name(alias), GITHUB_COMMIT);
    }

    /**
     * Create an aliased <code>GITHUB_COMMIT</code> table reference
     */
    public GithubCommit(Name alias) {
        this(alias, GITHUB_COMMIT);
    }

    /**
     * Create a <code>GITHUB_COMMIT</code> table reference
     */
    public GithubCommit() {
        this(DSL.name("GITHUB_COMMIT"), null);
    }

    public <O extends Record> GithubCommit(Table<O> child, ForeignKey<O, GithubCommitRecord> key) {
        super(child, key, GITHUB_COMMIT);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<GithubCommitRecord, Long> getIdentity() {
        return (Identity<GithubCommitRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<GithubCommitRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    @NotNull
    public List<UniqueKey<GithubCommitRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.GITHUB_COMMIT_PK);
    }

    @Override
    @NotNull
    public List<ForeignKey<GithubCommitRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_2B);
    }

    private transient Link _link;

    /**
     * Get the implicit join path to the <code>PUBLIC.LINK</code> table.
     */
    public Link link() {
        if (_link == null)
            _link = new Link(this, Keys.CONSTRAINT_2B);

        return _link;
    }

    @Override
    @NotNull
    public GithubCommit as(String alias) {
        return new GithubCommit(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public GithubCommit as(Name alias) {
        return new GithubCommit(alias, this);
    }

    @Override
    @NotNull
    public GithubCommit as(Table<?> alias) {
        return new GithubCommit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubCommit rename(String name) {
        return new GithubCommit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubCommit rename(Name name) {
        return new GithubCommit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubCommit rename(Table<?> name) {
        return new GithubCommit(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row6<Long, Long, String, String, LocalDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
