/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.tables.records;


import edu.java.domain.jooq.tables.StackoverflowAnswer;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StackoverflowAnswerRecord extends UpdatableRecordImpl<StackoverflowAnswerRecord> implements Record7<Long, Long, String, Boolean, LocalDateTime, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.LINK_ID</code>.
     */
    public void setLinkId(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.LINK_ID</code>.
     */
    @Nullable
    public Long getLinkId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.ANSWER_ID</code>.
     */
    public void setAnswerId(@NotNull Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.ANSWER_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getAnswerId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.USER_NAME</code>.
     */
    public void setUserName(@Nullable String value) {
        set(2, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.USER_NAME</code>.
     */
    @Size(max = 1000000000)
    @Nullable
    public String getUserName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.IS_ACCEPTED</code>.
     */
    public void setIsAccepted(@Nullable Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.IS_ACCEPTED</code>.
     */
    @Nullable
    public Boolean getIsAccepted() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.CREATION_DATE</code>.
     */
    public void setCreationDate(@Nullable LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.CREATION_DATE</code>.
     */
    @Nullable
    public LocalDateTime getCreationDate() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.LAST_ACTIVITY_DATE</code>.
     */
    public void setLastActivityDate(@Nullable LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.LAST_ACTIVITY_DATE</code>.
     */
    @Nullable
    public LocalDateTime getLastActivityDate() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.LAST_EDIT_DATE</code>.
     */
    public void setLastEditDate(@Nullable LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.LAST_EDIT_DATE</code>.
     */
    @Nullable
    public LocalDateTime getLastEditDate() {
        return (LocalDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row7<Long, Long, String, Boolean, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row7<Long, Long, String, Boolean, LocalDateTime, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return StackoverflowAnswer.STACKOVERFLOW_ANSWER.LINK_ID;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return StackoverflowAnswer.STACKOVERFLOW_ANSWER.ANSWER_ID;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return StackoverflowAnswer.STACKOVERFLOW_ANSWER.USER_NAME;
    }

    @Override
    @NotNull
    public Field<Boolean> field4() {
        return StackoverflowAnswer.STACKOVERFLOW_ANSWER.IS_ACCEPTED;
    }

    @Override
    @NotNull
    public Field<LocalDateTime> field5() {
        return StackoverflowAnswer.STACKOVERFLOW_ANSWER.CREATION_DATE;
    }

    @Override
    @NotNull
    public Field<LocalDateTime> field6() {
        return StackoverflowAnswer.STACKOVERFLOW_ANSWER.LAST_ACTIVITY_DATE;
    }

    @Override
    @NotNull
    public Field<LocalDateTime> field7() {
        return StackoverflowAnswer.STACKOVERFLOW_ANSWER.LAST_EDIT_DATE;
    }

    @Override
    @Nullable
    public Long component1() {
        return getLinkId();
    }

    @Override
    @NotNull
    public Long component2() {
        return getAnswerId();
    }

    @Override
    @Nullable
    public String component3() {
        return getUserName();
    }

    @Override
    @Nullable
    public Boolean component4() {
        return getIsAccepted();
    }

    @Override
    @Nullable
    public LocalDateTime component5() {
        return getCreationDate();
    }

    @Override
    @Nullable
    public LocalDateTime component6() {
        return getLastActivityDate();
    }

    @Override
    @Nullable
    public LocalDateTime component7() {
        return getLastEditDate();
    }

    @Override
    @Nullable
    public Long value1() {
        return getLinkId();
    }

    @Override
    @NotNull
    public Long value2() {
        return getAnswerId();
    }

    @Override
    @Nullable
    public String value3() {
        return getUserName();
    }

    @Override
    @Nullable
    public Boolean value4() {
        return getIsAccepted();
    }

    @Override
    @Nullable
    public LocalDateTime value5() {
        return getCreationDate();
    }

    @Override
    @Nullable
    public LocalDateTime value6() {
        return getLastActivityDate();
    }

    @Override
    @Nullable
    public LocalDateTime value7() {
        return getLastEditDate();
    }

    @Override
    @NotNull
    public StackoverflowAnswerRecord value1(@Nullable Long value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowAnswerRecord value2(@NotNull Long value) {
        setAnswerId(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowAnswerRecord value3(@Nullable String value) {
        setUserName(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowAnswerRecord value4(@Nullable Boolean value) {
        setIsAccepted(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowAnswerRecord value5(@Nullable LocalDateTime value) {
        setCreationDate(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowAnswerRecord value6(@Nullable LocalDateTime value) {
        setLastActivityDate(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowAnswerRecord value7(@Nullable LocalDateTime value) {
        setLastEditDate(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowAnswerRecord values(@Nullable Long value1, @NotNull Long value2, @Nullable String value3, @Nullable Boolean value4, @Nullable LocalDateTime value5, @Nullable LocalDateTime value6, @Nullable LocalDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StackoverflowAnswerRecord
     */
    public StackoverflowAnswerRecord() {
        super(StackoverflowAnswer.STACKOVERFLOW_ANSWER);
    }

    /**
     * Create a detached, initialised StackoverflowAnswerRecord
     */
    @ConstructorProperties({ "linkId", "answerId", "userName", "isAccepted", "creationDate", "lastActivityDate", "lastEditDate" })
    public StackoverflowAnswerRecord(@Nullable Long linkId, @NotNull Long answerId, @Nullable String userName, @Nullable Boolean isAccepted, @Nullable LocalDateTime creationDate, @Nullable LocalDateTime lastActivityDate, @Nullable LocalDateTime lastEditDate) {
        super(StackoverflowAnswer.STACKOVERFLOW_ANSWER);

        setLinkId(linkId);
        setAnswerId(answerId);
        setUserName(userName);
        setIsAccepted(isAccepted);
        setCreationDate(creationDate);
        setLastActivityDate(lastActivityDate);
        setLastEditDate(lastEditDate);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StackoverflowAnswerRecord
     */
    public StackoverflowAnswerRecord(edu.java.domain.jooq.tables.pojos.StackoverflowAnswer value) {
        super(StackoverflowAnswer.STACKOVERFLOW_ANSWER);

        if (value != null) {
            setLinkId(value.getLinkId());
            setAnswerId(value.getAnswerId());
            setUserName(value.getUserName());
            setIsAccepted(value.getIsAccepted());
            setCreationDate(value.getCreationDate());
            setLastActivityDate(value.getLastActivityDate());
            setLastEditDate(value.getLastEditDate());
            resetChangedOnNotNull();
        }
    }
}
