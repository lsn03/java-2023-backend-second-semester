/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.tables.pojos;


import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StackoverflowAnswer implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long linkId;
    private Long answerId;
    private String userName;
    private Boolean isAccepted;
    private LocalDateTime creationDate;
    private LocalDateTime lastActivityDate;
    private LocalDateTime lastEditDate;

    public StackoverflowAnswer() {}

    public StackoverflowAnswer(StackoverflowAnswer value) {
        this.linkId = value.linkId;
        this.answerId = value.answerId;
        this.userName = value.userName;
        this.isAccepted = value.isAccepted;
        this.creationDate = value.creationDate;
        this.lastActivityDate = value.lastActivityDate;
        this.lastEditDate = value.lastEditDate;
    }

    @ConstructorProperties({ "linkId", "answerId", "userName", "isAccepted", "creationDate", "lastActivityDate", "lastEditDate" })
    public StackoverflowAnswer(
        @Nullable Long linkId,
        @NotNull Long answerId,
        @Nullable String userName,
        @Nullable Boolean isAccepted,
        @Nullable LocalDateTime creationDate,
        @Nullable LocalDateTime lastActivityDate,
        @Nullable LocalDateTime lastEditDate
    ) {
        this.linkId = linkId;
        this.answerId = answerId;
        this.userName = userName;
        this.isAccepted = isAccepted;
        this.creationDate = creationDate;
        this.lastActivityDate = lastActivityDate;
        this.lastEditDate = lastEditDate;
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.LINK_ID</code>.
     */
    @Nullable
    public Long getLinkId() {
        return this.linkId;
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.LINK_ID</code>.
     */
    public void setLinkId(@Nullable Long linkId) {
        this.linkId = linkId;
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.ANSWER_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getAnswerId() {
        return this.answerId;
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.ANSWER_ID</code>.
     */
    public void setAnswerId(@NotNull Long answerId) {
        this.answerId = answerId;
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.USER_NAME</code>.
     */
    @Size(max = 1000000000)
    @Nullable
    public String getUserName() {
        return this.userName;
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.USER_NAME</code>.
     */
    public void setUserName(@Nullable String userName) {
        this.userName = userName;
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.IS_ACCEPTED</code>.
     */
    @Nullable
    public Boolean getIsAccepted() {
        return this.isAccepted;
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.IS_ACCEPTED</code>.
     */
    public void setIsAccepted(@Nullable Boolean isAccepted) {
        this.isAccepted = isAccepted;
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.CREATION_DATE</code>.
     */
    @Nullable
    public LocalDateTime getCreationDate() {
        return this.creationDate;
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.CREATION_DATE</code>.
     */
    public void setCreationDate(@Nullable LocalDateTime creationDate) {
        this.creationDate = creationDate;
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.LAST_ACTIVITY_DATE</code>.
     */
    @Nullable
    public LocalDateTime getLastActivityDate() {
        return this.lastActivityDate;
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.LAST_ACTIVITY_DATE</code>.
     */
    public void setLastActivityDate(@Nullable LocalDateTime lastActivityDate) {
        this.lastActivityDate = lastActivityDate;
    }

    /**
     * Getter for <code>STACKOVERFLOW_ANSWER.LAST_EDIT_DATE</code>.
     */
    @Nullable
    public LocalDateTime getLastEditDate() {
        return this.lastEditDate;
    }

    /**
     * Setter for <code>STACKOVERFLOW_ANSWER.LAST_EDIT_DATE</code>.
     */
    public void setLastEditDate(@Nullable LocalDateTime lastEditDate) {
        this.lastEditDate = lastEditDate;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final StackoverflowAnswer other = (StackoverflowAnswer) obj;
        if (this.linkId == null) {
            if (other.linkId != null)
                return false;
        }
        else if (!this.linkId.equals(other.linkId))
            return false;
        if (this.answerId == null) {
            if (other.answerId != null)
                return false;
        }
        else if (!this.answerId.equals(other.answerId))
            return false;
        if (this.userName == null) {
            if (other.userName != null)
                return false;
        }
        else if (!this.userName.equals(other.userName))
            return false;
        if (this.isAccepted == null) {
            if (other.isAccepted != null)
                return false;
        }
        else if (!this.isAccepted.equals(other.isAccepted))
            return false;
        if (this.creationDate == null) {
            if (other.creationDate != null)
                return false;
        }
        else if (!this.creationDate.equals(other.creationDate))
            return false;
        if (this.lastActivityDate == null) {
            if (other.lastActivityDate != null)
                return false;
        }
        else if (!this.lastActivityDate.equals(other.lastActivityDate))
            return false;
        if (this.lastEditDate == null) {
            if (other.lastEditDate != null)
                return false;
        }
        else if (!this.lastEditDate.equals(other.lastEditDate))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.linkId == null) ? 0 : this.linkId.hashCode());
        result = prime * result + ((this.answerId == null) ? 0 : this.answerId.hashCode());
        result = prime * result + ((this.userName == null) ? 0 : this.userName.hashCode());
        result = prime * result + ((this.isAccepted == null) ? 0 : this.isAccepted.hashCode());
        result = prime * result + ((this.creationDate == null) ? 0 : this.creationDate.hashCode());
        result = prime * result + ((this.lastActivityDate == null) ? 0 : this.lastActivityDate.hashCode());
        result = prime * result + ((this.lastEditDate == null) ? 0 : this.lastEditDate.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("StackoverflowAnswer (");

        sb.append(linkId);
        sb.append(", ").append(answerId);
        sb.append(", ").append(userName);
        sb.append(", ").append(isAccepted);
        sb.append(", ").append(creationDate);
        sb.append(", ").append(lastActivityDate);
        sb.append(", ").append(lastEditDate);

        sb.append(")");
        return sb.toString();
    }
}
