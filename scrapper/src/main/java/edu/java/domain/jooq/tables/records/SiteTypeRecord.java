/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.tables.records;


import edu.java.domain.jooq.tables.SiteType;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SiteTypeRecord extends UpdatableRecordImpl<SiteTypeRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>SITE_TYPE.SITE_TYPE_ID</code>.
     */
    public void setSiteTypeId(@Nullable Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>SITE_TYPE.SITE_TYPE_ID</code>.
     */
    @Nullable
    public Integer getSiteTypeId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>SITE_TYPE.NAME</code>.
     */
    public void setName(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>SITE_TYPE.NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 50)
    @NotNull
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Integer> field1() {
        return SiteType.SITE_TYPE.SITE_TYPE_ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return SiteType.SITE_TYPE.NAME;
    }

    @Override
    @Nullable
    public Integer component1() {
        return getSiteTypeId();
    }

    @Override
    @NotNull
    public String component2() {
        return getName();
    }

    @Override
    @Nullable
    public Integer value1() {
        return getSiteTypeId();
    }

    @Override
    @NotNull
    public String value2() {
        return getName();
    }

    @Override
    @NotNull
    public SiteTypeRecord value1(@Nullable Integer value) {
        setSiteTypeId(value);
        return this;
    }

    @Override
    @NotNull
    public SiteTypeRecord value2(@NotNull String value) {
        setName(value);
        return this;
    }

    @Override
    @NotNull
    public SiteTypeRecord values(@Nullable Integer value1, @NotNull String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SiteTypeRecord
     */
    public SiteTypeRecord() {
        super(SiteType.SITE_TYPE);
    }

    /**
     * Create a detached, initialised SiteTypeRecord
     */
    @ConstructorProperties({ "siteTypeId", "name" })
    public SiteTypeRecord(@Nullable Integer siteTypeId, @NotNull String name) {
        super(SiteType.SITE_TYPE);

        setSiteTypeId(siteTypeId);
        setName(name);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SiteTypeRecord
     */
    public SiteTypeRecord(edu.java.domain.jooq.tables.pojos.SiteType value) {
        super(SiteType.SITE_TYPE);

        if (value != null) {
            setSiteTypeId(value.getSiteTypeId());
            setName(value.getName());
            resetChangedOnNotNull();
        }
    }
}
